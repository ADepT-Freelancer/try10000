import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
// import { fetchCount } from "./counterAPI";

const initialState = {
  value: 0,
  status: "idle",
  users: [
    { id: 1, name: "Leo", surname: "Paganonni", age: 43, budget: 200000 },
    { id: 2, name: "Carl", surname: "Gellatino", age: 32, budget: 500000 },
    { id: 3, name: "Artur", surname: "Furzetto", age: 16, budget: 80000 },
  ],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

// export const incrementAsync = createAsyncThunk(
//   "users/fetchCount",
//   async (amount) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

export const usersSlice = createSlice({
  name: "users",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
    multiplication: (state, action) => {
      state.value *= action.payload;
    },
    addUser: (state, action) => {
      state.push(action.payload);
    },
    changeUserAge: (state, action) => {
      state.users.map((user) => {
        if (user.name === action.payload || user.id === action.payload) {
          user.age = 1000;
        }
        return user;
      });
    },

    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    // extraReducers: (builder) => {
    //   builder
    //     .addCase(incrementAsync.pending, (state) => {
    //       state.status = "loading";
    //     })
    //     .addCase(incrementAsync.fulfilled, (state, action) => {
    //       state.status = "idle";
    //       state.value += action.payload;
    //     });
  },
});

export const {
  decrement,
  increment,
  incrementByAmount,
  multiplication,
  addUser,
  changeUserAge,
} = usersSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUsers = (state) => state.users;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (amount) => (dispatch, getState) => {
  const currentValue = selectUsers(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount));
  }
};

export default usersSlice.reducer;
